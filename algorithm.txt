//fd_look algorithm.
while( 电梯当前状态为运行 || 电梯服务队列非空 ) 
{
	if(电梯状态 == STOPPED)
	{
		等待乘客服务请求信号;
		获取乘客服务请求信号所在楼层;
		if(请求楼层 > 电梯当前楼层)
			moving_up(0);//改变电梯状态等相关信息.当前楼层;
		else if(请求服务楼层 < 电梯所在楼层)
			moving_down(0);//改变电梯状态等相关信息.当前楼层等;
		else
		{
			open_door();
			passenger_in_out();
			close_door();
			(目的楼层 > 电梯当前楼层) ? (moving_up(0)) : (moving_down(0));//改变电梯状态等相关信息.
		}
	}
	else if(电梯状态 == MOVING_UP)
	{
		if( 比电梯当前楼层高的楼层有请求服务 ) || 电梯服务队列中最高目的楼层 > 电梯当前楼层 )
		{
			moving_up(1);
		}
		else
		{
			电梯状态 = MOVING_DOWN;
		}
	}
	else if(电梯状态 == MOVING_DOWN)
	{
		if( 比电梯当前楼层低的楼层有请求服务 || 电梯服务列表中的最低目的楼层 < 电梯当前楼层 )
		{
			moving_down(1);
		}
		else
		{
			电梯状态 = MOVING_UP;
		}
	}
	//---------------------------------------------------------------
	if( 电梯所在的当前楼层有同方向服务请求 || 当前楼层是目的楼层 )
	{
		open_door();
		passenger_in_out();
		close_door();
	}
	//---------------------------------------------------------------
	if(电梯目的楼层为空 && 电梯请求楼层为空)
	{
		stop();
	}
}

